- hosts: localhost
  become_method: sudo
  gather_facts: true

  vars:
    is_64_bit: false
    image_folder: ./
    image_name: 2021-05-07-raspios-buster-armhf-full
    mount_point: /tmp/raspi-os
    raspi_os_url: https://downloads.raspberrypi.org/raspios_full_armhf_latest
  tasks:

    - set_fact:
        image_name: 2020-05-27-raspios-buster-arm64
        raspi_os_latest: "{{ image_name }}"
        raspi_os_url: https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2020-05-28/2020-05-27-raspios-buster-arm64.zip
      when: is_64_bit | bool

    - set_fact:
        image_path: "{{ image_folder }}/{{ image_name }}.img"

    - name: Check what the latest Raspberry Pi OS image is
      uri:
        url: "{{ raspi_os_url }}"
        follow_redirects: none
        status_code: [302]
        validate_certs: False
      register: raspi_os_latest_redirect
      when: not is_64_bit | bool

    - set_fact:
        raspi_os_latest: "{{ raspi_os_latest_redirect.location | basename }}"
      when: not is_64_bit | bool

    - name: Check if we have it locally
      stat:
        path: "{{ image_folder }}/{{ raspi_os_latest }}"
      register: stat_result

    - name: Download the image
      get_url:
        url: "{{ raspi_os_url }}"
        force: false
        dest: "{{ image_folder }}"
      when: stat_result.stat.exists == False

    - name: Unzip the os image
      unarchive:
        src: "{{ image_folder }}/{{ image_name }}.zip"
        dest: "{{ image_folder }}"
        creates: "{{ image_path }}"

    - name: List the loop devices associated with image
      command: "losetup --output=NAME --associated {{image_path}}"
      register: loop_device_check

    - name: Mount all the partitions to loop devices
      command: "partx --add --verbose {{image_path}}"
      become: true
      when: loop_device_check.stdout_lines[1] is not defined

    - name: List the loop devices associated with image
      command: "losetup --output=NAME --associated {{image_path}}"
      register: loop_devices

    - debug:
        var: loop_devices
        verbosity: 2

    - name: List out the required info, to build an fstab/command for mount
      # It's easier to do the filtering here
      shell: lsblk --output LABEL,FSTYPE,UUID,SIZE,PARTUUID,PKNAME "{{ loop_devices.stdout_lines[-1] }}" | grep "{{ loop_devices.stdout_lines[-1] | basename }}" | sort
      register: fstab_info

    - debug:
        var: fstab_info
        verbosity: 2

    # We've greped and sorted so it will always be boot, rootfs
    - set_fact:
        boot:
          label: "{{ fstab_info.stdout_lines[0].split()[0] }}"
          fstype: "{{ fstab_info.stdout_lines[0].split()[1] }}"
          partuuid: "{{ fstab_info.stdout_lines[0].split()[4] }}"


    - set_fact:
        rootfs:
          label: "{{ fstab_info.stdout_lines[1].split()[0] }}"
          fstype: "{{ fstab_info.stdout_lines[1].split()[1] }}"
          partuuid: "{{ fstab_info.stdout_lines[1].split()[4] }}"

    - debug:
        var: boot
        verbosity: 2

    - debug:
        var: rootfs
        verbosity: 2

    # Always unmount image, this means create mount point works correctly
    # it a quick and easy way to enable re-running without errors
    - name: Unmount image
      command: "umount -lf {{ mount_point }}"
      become: true
      ignore_errors: true

    # When Raspberry Pi OS is mounted to this point it messes up how ansible checks if the directory exists
    # it should be skipped if the directory is mounted
    - name: Create mount point
      file:
        path: "{{mount_point}}"
        state: directory
        recurse: true

    - name: Mount rootfs
      become: true
      mount:
        path: "{{ mount_point }}"
        src: "PARTUUID={{ rootfs.partuuid }}"
        fstype: "{{ rootfs.fstype }}"
        fstab: /tmp/raspi-os-fstab
        opts: defaults,noatime
        state: mounted

    - name: Mount boot
      become: true
      mount:
        path: "{{ mount_point }}/boot"
        src: "PARTUUID={{ boot.partuuid }}"
        fstype: "{{ boot.fstype }}"
        fstab: /tmp/raspi-os-fstab
        opts: defaults
        state: mounted

    # # None of this is required since we're not actually chrooting into the image
    # - name: Mount proc
    #   command: mount -t proc /proc "{{ mount_point }}/proc"
    #   args:
    #     warn: false

    # - name: Mount dev
    #   command: mount -t sysfs /sys "{{ mount_point }}/sys"
    #   args:
    #     warn: false

    # - name: Mount dev
    #   command: mount -o bind /dev "{{ mount_point }}/dev"
    #   args:
    #     warn: false

    # Explanation of why this needs to be there https://wiki.debian.org/QemuUserEmulation
    - name: Copy qemu-arm-static to Raspberry Pi OS to enable chrooting
      become: true
      copy:
        src: /usr/bin/qemu-arm-static
        dest: "{{ mount_point }}/usr/bin/qemu-arm-static"
        mode: '0755'
        remote_src: true

    # # https://bugs.launchpad.net/qemu/+bug/1813034
    # # https://patchwork.kernel.org/patch/10807531/
    # # https://www.raspberrypi.org/forums/viewtopic.php?t=235594
    # 'raspi-copies-and-fills' does not support host architecture, and this generates lots of warnings.
    # We move the file until the end to prevent these
    - name: Move preload file to avoid noisy build
      become: true
      shell: "mv {{ mount_point }}/etc/ld.so.preload {{ mount_point }}/etc/ld.so.preload.bak"
      args:
        creates: "{{ mount_point }}/etc/ld.so.preload.bak"
