- hosts: localhost
  become_method: sudo
  gather_facts: true

  vars:
    image_folder: ./
    # TODO: use 'image_name' on localhost if already defined
    image_name: 2021-10-30-raspios-bullseye-armhf
    mount_point: /tmp/raspi-os
  tasks:

    - set_fact:
        image_path: "{{ image_folder }}{{ image_name }}.img"

    - name: Unzip OS image
      unarchive:
        src: "{{ image_folder }}/{{ image_name }}.zip"
        dest: "{{ image_folder }}"
        creates: "{{ image_path }}"

    - name: List the loop device(s) associated with image
      command: "losetup --output=NAME --associated {{image_path}}"
      register: loop_device_check

    - name: Create a new loopback device
      command: "losetup -f"
      become: true

    - name: If none, mount all the partitions to a loop device
      command: "partx --add --verbose {{image_path}}"
      become: true
      when: loop_device_check.stdout_lines[1] is not defined

    - name: List the loop device(s) associated with image
      command: "losetup --output=NAME --associated {{image_path}}"
      register: loop_devices

    - debug:
        var: loop_devices
        verbosity: 2

    - name: blkid boot
      shell: "blkid -l -o export -t LABEL='boot'"
      register: blkid_boot_stdout

    - debug:
        var: blkid_boot_stdout
        verbosity: 2

    - name: blkid rootfs
      shell: "blkid -l -o export -t LABEL='rootfs'"
      register: blkid_rootfs_stdout

    - debug:
        var: blkid_rootfs_stdout
        verbosity: 2

    - set_fact:
        boot:
          fstype: "{{ blkid_boot_stdout.stdout_lines[-2].replace('TYPE=', '') }}"
          partuuid_line: "{{ blkid_boot_stdout.stdout_lines[-1] }}"
        rootfs:
          fstype: "{{ blkid_rootfs_stdout.stdout_lines[-2].replace('TYPE=', '') }}"
          partuuid_line: "{{ blkid_rootfs_stdout.stdout_lines[-1] }}"

    - debug:
        var: boot
        verbosity: 2

    - debug:
        var: rootfs
        verbosity: 2

    # Always unmount image, this means create mount point works correctly
    # it a quick and easy way to enable re-running without errors
    - name: Unmount image
      command: "umount -lf {{ mount_point }}"
      become: true
      ignore_errors: true

    # When Raspberry Pi OS is mounted to this point it messes up how ansible checks if the directory exists
    # it should be skipped if the directory is mounted
    - name: Create mount point
      file:
        path: "{{mount_point}}"
        state: directory
        recurse: true

    - name: Mount rootfs
      become: true
      mount:
        path: "{{ mount_point }}"
        src: "{{ rootfs.partuuid_line }}"
        fstype: "{{ rootfs.fstype }}"
        fstab: /tmp/raspi-os-fstab
        opts: defaults,noatime
        state: mounted

    - name: Mount boot
      become: true
      mount:
        path: "{{ mount_point }}/boot"
        src: "{{ boot.partuuid_line }}"
        fstype: "{{ boot.fstype }}"
        fstab: /tmp/raspi-os-fstab
        opts: defaults
        state: mounted

    # # None of this is required since we're not actually chrooting into the image
    # - name: Mount proc
    #   command: mount -t proc /proc "{{ mount_point }}/proc"
    #   args:
    #     warn: false

    # - name: Mount dev
    #   command: mount -t sysfs /sys "{{ mount_point }}/sys"
    #   args:
    #     warn: false

    # - name: Mount dev
    #   command: mount -o bind /dev "{{ mount_point }}/dev"
    #   args:
    #     warn: false

    # Explanation of why this needs to be there https://wiki.debian.org/QemuUserEmulation
    - name: Copy qemu-arm-static to Raspberry Pi OS to enable chrooting
      become: true
      copy:
        src: /usr/bin/qemu-arm-static
        dest: "{{ mount_point }}/usr/bin/qemu-arm-static"
        mode: '0755'
        remote_src: true

    # # https://bugs.launchpad.net/qemu/+bug/1813034
    # # https://patchwork.kernel.org/patch/10807531/
    # # https://www.raspberrypi.org/forums/viewtopic.php?t=235594
    # 'raspi-copies-and-fills' does not support host architecture, and this generates lots of warnings.
    # We move the file until the end to prevent these
    - name: Move preload file to avoid noisy build
      become: true
      shell: "mv {{ mount_point }}/etc/ld.so.preload {{ mount_point }}/etc/ld.so.preload.bak"
      args:
        creates: "{{ mount_point }}/etc/ld.so.preload.bak"
