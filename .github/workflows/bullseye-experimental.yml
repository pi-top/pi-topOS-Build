name: pi-topOS Experimental Bullseye Build

on:
  push:
    branches:
      - "**"
    paths:
      - "playbooks"
      - "inventory"
      - "ansible.cfg"
      - ".github/workflows/bullseye-experimental.yml"
  workflow_dispatch:
  schedule:
    # Run daily at midnight
    - cron:  '0 0 * * *'

env:
  DISTRO_NAME: "bullseye"
  REPO_NAME: "experimental"

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - raspi_os_img: "2021-10-30-raspios-bullseye-armhf-lite"
            raspi_os_url: "https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf-lite.zip"

          - raspi_os_img: "2021-10-30-raspios-bullseye-armhf"
            raspi_os_url: "https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf.zip"

          - raspi_os_img: "2021-10-30-raspios-bullseye-armhf-full"
            raspi_os_url: "https://downloads.raspberrypi.org/raspios_full_armhf/images/raspios_full_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf-full.zip"

          - raspi_os_img: "2021-10-30-raspios-bullseye-arm64-lite"
            raspi_os_url: "https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2021-11-08/2021-10-30-raspios-bullseye-arm64-lite.zip"

          - raspi_os_img: "2021-10-30-raspios-bullseye-arm64"
            raspi_os_url: "https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2021-11-08/2021-10-30-raspios-bullseye-arm64.zip"

    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Install ansible and playbook dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y ansible qemu-user-static unzip zerofree

      - name: Build
        run: |
          export ANSIBLE_FORCE_COLOR=true
          export TERM=xterm-color
          # chroot connection requires running as root
          # 'ansible-playbook' is not in root user's PATH
          ANSIBLE="sudo $(which ansible-playbook) -i inventory -vv"

          echo "==> Running get_raspios playbook..."
          ${ANSIBLE} --extra-vars raspi_os_url=${{ matrix.raspi_os_url }} \
                     --extra-vars image_name=${{ matrix.raspi_os_img }} \
                     playbooks/get_raspios.yml

          echo "==> Running mount_raspios playbook..."
          ${ANSIBLE} --extra-vars image_name=${{ matrix.raspi_os_img }} \
                     playbooks/mount_raspios.yml

          echo "==> Running create_pi_top_os_image playbook..."
          ${ANSIBLE} playbooks/create_pi_top_os_image.yml

          echo "==> Running mount_pi_top_os playbook..."
          ${ANSIBLE} playbooks/mount_pi_top_os.yml

          echo "==> Running install_pi_top_os playbook..."
          ${ANSIBLE} --extra-vars repo_name=${{ env.REPO_NAME }} \
                     --extra-vars distro_name=${{ env.DISTRO_NAME }} \
                     playbooks/install_pi_top_os.yml

          echo "==> Running configure_pi_top_os playbook..."
          ${ANSIBLE} --extra-vars distro_name=${{ env.DISTRO_NAME }} \
                     --extra-vars build_number=${{ github.run_number || github.run_id }} \
                     --extra-vars build_repo_commit="$(git rev-parse HEAD)" \
                     --extra-vars build_repo_commit_short="$(git rev-parse --short HEAD)" \
                     --extra-vars build_action_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
                     --extra-vars build_repo_name="${{ env.REPO_NAME }}" \
                     playbooks/configure_pi_top_os.yml

          echo "==> Running finalise_pi_top_image playbook..."
          ${ANSIBLE} playbooks/finalise_pi_top_image.yml

          # echo "==> Running analyse_build playbook..."
          # ${ANSIBLE} playbooks/analyse_build.yml

      - name: Get zip filename
        run: echo "ZIP_FILENAME=$(find playbooks/artifacts -name "*.zip" | head -n1)" >> $GITHUB_ENV

      - name: Get artifact name
        run: echo "ARTIFACT_NAME=${{ env.REPO_NAME }}-${{ env.DISTRO_NAME }}-${{ github.run_number || github.run_id }}" >> $GITHUB_ENV

      - name: Upload OS zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          if-no-files-found: error
          path: ${{ env.ZIP_FILENAME }}

      - name: Upload metadata artifact
        uses: actions/upload-artifact@v2
        with:
          name: metadata
          if-no-files-found: error
          path: |
            playbooks/artifacts/*
            !${{ env.ZIP_FILENAME }}

      - name: Upload OS zip to GCS
        uses: google-github-actions/upload-cloud-storage@v0.4.0
        with:
          credentials: ${{ secrets.GOOGLE_CLOUD_UPLOAD_JSON_CREDENTIALS }}
          path: ${{ env.ZIP_FILENAME }}
          destination: ${{ secrets.GOOGLE_CLOUD_OS_UPLOAD_BUCKET }}/pi-topOS-${{ env.DISTRO_NAME }}/
