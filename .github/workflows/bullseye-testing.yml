name: pi-topOS Testing Bullseye Build

on:
  workflow_dispatch:

env:
  DISTRO_NAME: "bullseye"
  REPO_NAME: "testing"  # 'experimental', 'unstable', 'testing', 'release'
  RASPIOS_BUILD_DATE: "2022-09-22"
  RASPIOS_RELEASE_DATE: "2022-09-26"

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type_suffix: ["", "-lite"]

    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Get RPi OS image name
        run: |
          echo "IMAGE_NAME=${{ env.RASPIOS_BUILD_DATE }}-raspios-${{ env.DISTRO_NAME }}-armhf${{ matrix.build_type_suffix }}" >> $GITHUB_ENV

      - name: Install ansible and playbook dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y ansible qemu-user-static unzip zerofree

      - name: Build
        run: |
          export ANSIBLE_FORCE_COLOR=true
          export TERM=xterm-color
          # chroot connection requires running as root
          # 'ansible-playbook' is not in root user's PATH
          ANSIBLE="sudo $(which ansible-playbook) -i inventory -vv"

          build_type_dir="raspios_$(echo armhf${{ matrix.build_type_suffix }} | python3 -c "import sys; print('_'.join(reversed(sys.stdin.read().strip().split('-'))))")"
          url="https://downloads.raspberrypi.org/${build_type_dir}/images/${build_type_dir}-${{ env.RASPIOS_RELEASE_DATE }}/${{ env.IMAGE_NAME }}.img.xz"

          echo "==> Running get_raspios playbook..."
          ${ANSIBLE} --extra-vars "raspi_os_url=${url}" \
                     --extra-vars "image_name=${{ env.IMAGE_NAME }}" \
                     playbooks/get_raspios.yml

          echo "==> Running mount_raspios playbook..."
          ${ANSIBLE} --extra-vars "image_name=${{ env.IMAGE_NAME }}" \
                     playbooks/mount_raspios.yml

          echo "==> Running create_pi_top_os_image playbook..."
          ${ANSIBLE} playbooks/create_pi_top_os_image.yml

          echo "==> Running mount_pi_top_os playbook..."
          ${ANSIBLE} playbooks/mount_pi_top_os.yml

          echo "==> Running install_pi_top_os playbook..."
          ${ANSIBLE} --extra-vars "repo_name=${{ env.REPO_NAME }}" \
                     --extra-vars "distro_name=${{ env.DISTRO_NAME }}" \
                     --extra-vars "top_level_pkg=pt-os${{ matrix.build_type_suffix }}" \
                     --extra-vars "{'full_install': ${{ matrix.build_type_suffix == '' }}}" \
                     playbooks/install_pi_top_os.yml

          echo "==> Running configure_pi_top_os playbook..."
          ${ANSIBLE} --extra-vars "distro_name=${{ env.DISTRO_NAME }}" \
                     --extra-vars "build_number=${{ github.run_number || github.run_id }}" \
                     --extra-vars "build_repo_commit=$(git rev-parse HEAD)" \
                     --extra-vars "build_repo_commit_short=$(git rev-parse --short HEAD)" \
                     --extra-vars "build_action_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
                     --extra-vars "build_repo_name=${{ env.REPO_NAME }}" \
                     --extra-vars "{'full_install': ${{ matrix.build_type_suffix == '' }}}" \
                     playbooks/configure_pi_top_os.yml

          echo "==> Running finalise_pi_top_image playbook..."
          ${ANSIBLE} --extra-vars "distro_name=${{ env.DISTRO_NAME }}" \
                     --extra-vars "build_number=${{ github.run_number || github.run_id }}" \
                     --extra-vars "build_repo_name=${{ env.REPO_NAME }}" \
                     --extra-vars "architecture=armhf${{ matrix.build_type_suffix }}" \
                     playbooks/finalise_pi_top_image.yml

          echo "==> Running analyse_build playbook..."
          ${ANSIBLE} --extra-vars "build_number=${{ github.run_number || github.run_id }}" \
                     playbooks/analyse_build.yml

      - name: Get zip filename
        run: echo "ZIP_FILENAME=$(find playbooks/artifacts -name "*.zip" | head -n1)" >> $GITHUB_ENV

      - name: Get current date
        id: date
        run: echo "DATE_STAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Upload OS zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: pi-topOS_${{ env.DISTRO_NAME }}_${{ env.REPO_NAME }}_armhf${{ matrix.build_type_suffix }}_${{ env.DATE_STAMP }}_B${{ github.run_number || github.run_id }}
          if-no-files-found: error
          path: ${{ env.ZIP_FILENAME }}

      - name: Upload metadata artifact
        uses: actions/upload-artifact@v2
        with:
          name: metadata
          if-no-files-found: error
          path: |
            playbooks/artifacts/*
            !${{ env.ZIP_FILENAME }}

      - name: Upload OS zip to GCS
        uses: google-github-actions/upload-cloud-storage@v0.4.0
        with:
          credentials: ${{ secrets.GOOGLE_CLOUD_UPLOAD_JSON_CREDENTIALS }}
          path: ${{ env.ZIP_FILENAME }}
          destination: ${{ secrets.GOOGLE_CLOUD_OS_UPLOAD_BUCKET }}/pi-topOS-${{ env.DISTRO_NAME }}/
