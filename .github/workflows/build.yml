name: pi-topOS Build

on:
  # Run on any commit
  push:
    branches:
      - "**"
  workflow_dispatch:
    # Not required as defaults are handled later on (to support push events)
    inputs:
      REPO_NAME:
        description: 'REPO_NAME'
        required: false
        default: "pi-top-os"
      DISTRO_NAME:
        description: 'DISTRO_NAME'
        required: false
        default: "sirius"
  schedule:
    # Run daily at midnight
    - cron:  '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0

      - name: Build
        run: |
          export ANSIBLE_FORCE_COLOR=true
          export TERM=xterm-color

          echo "==> Installing run dependencies..."
          apt-get update
          apt-get install -y ansible qemu-user-static unzip zerofree

          echo "==> Running get_raspios playbook..."
          sudo $(which ansible-playbook) playbooks/get_raspios.yml

          echo "==> Running mount_raspios playbook..."
          sudo $(which ansible-playbook) playbooks/mount_raspios.yml

          echo "==> Running create_pi_top_os_image playbook..."
          sudo $(which ansible-playbook) playbooks/create_pi_top_os_image.yml

          echo "==> Running mount_pi_top_os playbook..."
          sudo $(which ansible-playbook) playbooks/mount_pi_top_os.yml

          echo "==> Running install_pi_top_os playbook..."
          sudo $(which ansible-playbook) playbooks/ --extra-vars "\
              repo_name=${REPO_NAME}" \
              distro_name=${DISTRO_NAME} \
              build_number=${BUILD_NUMBER} \
              build_commit=${BUILD_COMMIT}"\
            " \
              install_pi_top_os.yml

          echo "==> Running finalise_pi_top_image playbook..."
          sudo $(which ansible-playbook) playbooks/finalise_pi_top_image.yml

          echo "==> Running analyse_build playbook..."
          sudo $(which ansible-playbook) playbooks/analyse_build.yml

      - name: Get zip filename
        run: echo "ZIP_FILENAME=$(find artifacts -name "*.zip" | head -n1)" >> $GITHUB_ENV

      - name: Get push artifact name
        if: github.event_name == 'push'
        run: echo "ARTIFACT_NAME=pt-os-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      # 'pt-os' artifact name is used by publish.yml
      - name: Get manual trigger artifact name
        if: github.event_name == 'workflow_dispatch'
        run: echo "ARTIFACT_NAME=pt-os" >> $GITHUB_ENV

      - name: Upload OS zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          if-no-files-found: error
          path: ${{ env.ZIP_FILENAME }}

      - name: Upload metadata
        uses: actions/upload-artifact@v2
        with:
          name: metadata
          if-no-files-found: error
          path: |
            artifacts/*
